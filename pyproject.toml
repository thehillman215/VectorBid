[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vectorbid"
version = "1.0.0"
description = "AI-powered pilot schedule bidding assistant"
readme = "replit.md"
license = {text = "MIT"}
authors = [
    {name = "VectorBid Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
]
requires-python = ">=3.11"
dependencies = [
    "Flask>=3.0.0",
    "Flask-SQLAlchemy>=3.1.0",
    "Flask-Login>=0.6.0",
    "Flask-Dance>=7.1.0",
    "openai>=1.30.0",
    "PyMuPDF>=1.24.0",
    "pytest>=8.3.0",
    "python-dotenv>=1.0.0",
    "gunicorn>=23.0.0",
    "psycopg2-binary>=2.9.0",
    "PyJWT>=2.10.0",
    "oauthlib>=3.3.0",
    "email-validator>=2.2.0",
    "SQLAlchemy>=2.0.0",
    "Werkzeug>=3.1.0",
    "pyyaml>=6.0.0",
    "jinja2>=3.0.0",
    "python-multipart>=0.0.5",
]

[project.optional-dependencies]
dev = [
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "black>=23.0.0",
]

[project.urls]
Homepage = "https://github.com/vectorbid/vectorbid"
Repository = "https://github.com/vectorbid/vectorbid.git"
Issues = "https://github.com/vectorbid/vectorbid/issues"

[project.scripts]
vb = "vb.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
fix = true

[tool.ruff.lint]
# includes isort rules
select = ["E","F","I","UP","B"]
ignore = []

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py311"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "validate_openapi.py",
    "test_api.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "flask_dance.*",
    "openai.*",
    "fitz.*",
]
ignore_missing_imports = true

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]
